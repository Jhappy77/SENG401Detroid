package engine;

public class Board {

	/**An enum type for the 8 files/columns of a chess board. Each constant has a field that contains a long with only the bits falling on the
	 * file set.
	 * 
	 * @author Viktor
	 *
	 */
	public enum File {
		
		A (0b0000000100000001000000010000000100000001000000010000000100000001L),
		B (0b0000001000000010000000100000001000000010000000100000001000000010L),
		C (0b0000010000000100000001000000010000000100000001000000010000000100L),
		D (0b0000100000001000000010000000100000001000000010000000100000001000L),
		E (0b0001000000010000000100000001000000010000000100000001000000010000L),
		F (0b0010000000100000001000000010000000100000001000000010000000100000L),
		G (0b0100000001000000010000000100000001000000010000000100000001000000L),
		H (0b1000000010000000100000001000000010000000100000001000000010000000L);
		
		public final long bitmap;
		
		private File(long bitmap) {
			this.bitmap = bitmap;
		}
		/**Returns a the numeric representation of a file of the chess board with only the bits falling on the specified file set.
		 * 
		 * @param fileInd the index of the file*/
		public static long getByIndex(int fileInd) {
			switch(fileInd) {
				case 0:  return 0b0000000100000001000000010000000100000001000000010000000100000001L;
				case 1:  return 0b0000001000000010000000100000001000000010000000100000001000000010L;
				case 2:  return 0b0000010000000100000001000000010000000100000001000000010000000100L;
				case 3:  return 0b0000100000001000000010000000100000001000000010000000100000001000L;
				case 4:  return 0b0001000000010000000100000001000000010000000100000001000000010000L;
				case 5:  return 0b0010000000100000001000000010000000100000001000000010000000100000L;
				case 6:  return 0b0100000001000000010000000100000001000000010000000100000001000000L;
				case 7:  return 0b1000000010000000100000001000000010000000100000001000000010000000L;
				default: throw new IllegalArgumentException("Invalid file index.");
			}
		}
		/**Returns a the numeric representation of the file of the chess board on which the input parameter square lies with only
		 * the relevant bits set.
		 * 
		 * @param sqr a Square enum*/
		public static long getBySquare(Square sqr) {
			return getByIndex(sqr.ordinal() & 7);
		}
		/**Returns a the numeric representation of the file of the chess board on which the input parameter square lies with only
		 * the relevant bits set.
		 * 
		 * @param sqrInd the index of the square*/
		public static long getBySquareIndex(int sqrInd) {
			return getByIndex(sqrInd & 7);
		}
	}
	
	/**An enum type for the 8 ranks/rows of a chess board. Each constant has a field that contains a long with only the byte on the rank's
	 * index set.
	 * 
	 * @author Viktor
	 *
	 */
	public enum Rank {
		
		R1 (0b0000000000000000000000000000000000000000000000000000000011111111L),
		R2 (0b0000000000000000000000000000000000000000000000001111111100000000L),
		R3 (0b0000000000000000000000000000000000000000111111110000000000000000L),
		R4 (0b0000000000000000000000000000000011111111000000000000000000000000L),
		R5 (0b0000000000000000000000001111111100000000000000000000000000000000L),
		R6 (0b0000000000000000111111110000000000000000000000000000000000000000L),
		R7 (0b0000000011111111000000000000000000000000000000000000000000000000L),
		R8 (0b1111111100000000000000000000000000000000000000000000000000000000L);
		
		public final long bitmap;
		
		private Rank(long bitmap) {
			this.bitmap = bitmap;
		}
		/**Returns a the numeric representation of a rank of the chess board with only the byte on the rank's index set.
		 * 
		 * @param rnkInd the index of the rank*/
		public static long getByIndex(int rnkInd) {
			switch(rnkInd) {
				case 0:  return 0b0000000000000000000000000000000000000000000000000000000011111111L;
				case 1:  return 0b0000000000000000000000000000000000000000000000001111111100000000L;
				case 2:  return 0b0000000000000000000000000000000000000000111111110000000000000000L;
				case 3:  return 0b0000000000000000000000000000000011111111000000000000000000000000L;
				case 4:  return 0b0000000000000000000000001111111100000000000000000000000000000000L;
				case 5:  return 0b0000000000000000111111110000000000000000000000000000000000000000L;
				case 6:  return 0b0000000011111111000000000000000000000000000000000000000000000000L;
				case 7:  return 0b1111111100000000000000000000000000000000000000000000000000000000L;
				default: throw new IllegalArgumentException("Invalid rank index.");
			}
		}
		/**Returns a the numeric representation of the rank of the chess board on which the input parameter square lies with only
		 * the byte on the rank's index set.
		 * 
		 * @param sqr a Square enum*/
		public static long getBySquare(Square sqr) {
			return getByIndex(sqr.ordinal() >>> 3);
		}
		/**Returns a the numeric representation of the rank of the chess board on which the input parameter square lies with only
		 * the byte on the rank's index set.
		 * 
		 * @param sqrInd the index of the square*/
		public static long getBySquareIndex(int sqrInd) {
			return getByIndex(sqrInd >>> 3);
		}
	}
	
	/**An enum type for the 15 diagonals of a chess board. Each constant has a field that contains a long with only the bits on indexes
	 * of the squares falling on the diagonal set.
	 * 
	 * @author Viktor
	 *
	 */
	public enum Diagonal {
		
		DG1  (0b0000000000000000000000000000000000000000000000000000000000000001L),
		DG2  (0b0000000000000000000000000000000000000000000000000000000100000010L),
		DG3  (0b0000000000000000000000000000000000000000000000010000001000000100L),
		DG4  (0b0000000000000000000000000000000000000001000000100000010000001000L),
		DG5  (0b0000000000000000000000000000000100000010000001000000100000010000L),
		DG6  (0b0000000000000000000000010000001000000100000010000001000000100000L),
		DG7  (0b0000000000000001000000100000010000001000000100000010000001000000L),
		DG8  (0b0000000100000010000001000000100000010000001000000100000010000000L),
		DG9  (0b0000001000000100000010000001000000100000010000001000000000000000L),
		DG10 (0b0000010000001000000100000010000001000000100000000000000000000000L),
		DG11 (0b0000100000010000001000000100000010000000000000000000000000000000L),
		DG12 (0b0001000000100000010000001000000000000000000000000000000000000000L),
		DG13 (0b0010000001000000100000000000000000000000000000000000000000000000L),
		DG14 (0b0100000010000000000000000000000000000000000000000000000000000000L),
		DG15 (0b1000000000000000000000000000000000000000000000000000000000000000L);
		
		public final long bitmap;
		
		private Diagonal(long bitmap) {
			this.bitmap = bitmap;
		}
		/**Returns a the numeric representation of a diagonal of the chess board with only the bits falling on the specified diagonal set.
		 * 
		 * @param dgnInd the index of the diagonal*/
		public static long getByIndex(int dgnInd) {
			switch(dgnInd) {
				case 0:  return 0b0000000000000000000000000000000000000000000000000000000000000001L;
				case 1:  return 0b0000000000000000000000000000000000000000000000000000000100000010L;
				case 2:  return 0b0000000000000000000000000000000000000000000000010000001000000100L;
				case 3:  return 0b0000000000000000000000000000000000000001000000100000010000001000L;
				case 4:  return 0b0000000000000000000000000000000100000010000001000000100000010000L;
				case 5:  return 0b0000000000000000000000010000001000000100000010000001000000100000L;
				case 6:  return 0b0000000000000001000000100000010000001000000100000010000001000000L;
				case 7:  return 0b0000000100000010000001000000100000010000001000000100000010000000L;
				case 8:  return 0b0000001000000100000010000001000000100000010000001000000000000000L;
				case 9:  return 0b0000010000001000000100000010000001000000100000000000000000000000L;
				case 10: return 0b0000100000010000001000000100000010000000000000000000000000000000L;
				case 11: return 0b0001000000100000010000001000000000000000000000000000000000000000L;
				case 12: return 0b0010000001000000100000000000000000000000000000000000000000000000L;
				case 13: return 0b0100000010000000000000000000000000000000000000000000000000000000L;
				case 14: return 0b1000000000000000000000000000000000000000000000000000000000000000L;
				default: throw new IllegalArgumentException("Invalid diagonal index.");
			}
		}
		/**Returns a the numeric representation of a diagonal of the chess board on which the input parameter square lies with only
		 * the relevant bits set.
		 * 
		 * @param sqr a Square enum*/
		public static long getBySquare(Square sqr) {
			int sqrInd = sqr.ordinal();
			return getByIndex((sqrInd & 7) + (sqrInd >>> 3));
		}
		/**Returns a the numeric representation of a diagonal of the chess board on which the input parameter square lies with only
		 * the relevant bits set.
		 * 
		 * @param sqrInd the index of a square*/
		public static long getBySquareIndex(int sqrInd) {
			return getByIndex((sqrInd & 7) + (sqrInd >>> 3));
		}
	}
	
	/**An enum type for the 15 anti-diagonals of a chess board. Each constant has a field that contains a long with only the bits on indexes
	 * of the squares falling on the diagonal set.
	 * 
	 * @author Viktor
	 *
	 */
	public enum AntiDiagonal {
		
		ADG1  (0b0000000100000000000000000000000000000000000000000000000000000000L),
		ADG2  (0b0000001000000001000000000000000000000000000000000000000000000000L),
		ADG3  (0b0000010000000010000000010000000000000000000000000000000000000000L),
		ADG4  (0b0000100000000100000000100000000100000000000000000000000000000000L),
		ADG5  (0b0001000000001000000001000000001000000001000000000000000000000000L),
		ADG6  (0b0010000000010000000010000000010000000010000000010000000000000000L),
		ADG7  (0b0100000000100000000100000000100000000100000000100000000100000000L),
		ADG8  (0b1000000001000000001000000001000000001000000001000000001000000001L),
		ADG9  (0b0000000010000000010000000010000000010000000010000000010000000010L),
		ADG10 (0b0000000000000000100000000100000000100000000100000000100000000100L),
		ADG11 (0b0000000000000000000000001000000001000000001000000001000000001000L),
		ADG12 (0b0000000000000000000000000000000010000000010000000010000000010000L),
		ADG13 (0b0000000000000000000000000000000000000000100000000100000000100000L),
		ADG14 (0b0000000000000000000000000000000000000000000000001000000001000000L),
		ADG15 (0b0000000000000000000000000000000000000000000000000000000010000000L);
		
		final long bitmap;
		
		private AntiDiagonal(long bitmap) {
			this.bitmap = bitmap;
		}
		/**Returns a the numeric representation of an anti-diagonal of the chess board with only the bits falling on the specified diagonal set.
		 * 
		 * @param adgnInd the index of the anti-diagonal*/
		public static long getByIndex(int adgnInd) {
			switch(adgnInd) {
				case 0:  return 0b0000000100000000000000000000000000000000000000000000000000000000L;
				case 1:  return 0b0000001000000001000000000000000000000000000000000000000000000000L;
				case 2:  return 0b0000010000000010000000010000000000000000000000000000000000000000L;
				case 3:  return 0b0000100000000100000000100000000100000000000000000000000000000000L;
				case 4:  return 0b0001000000001000000001000000001000000001000000000000000000000000L;
				case 5:  return 0b0010000000010000000010000000010000000010000000010000000000000000L;
				case 6:  return 0b0100000000100000000100000000100000000100000000100000000100000000L;
				case 7:  return 0b1000000001000000001000000001000000001000000001000000001000000001L;
				case 8:  return 0b0000000010000000010000000010000000010000000010000000010000000010L;
				case 9:  return 0b0000000000000000100000000100000000100000000100000000100000000100L;
				case 10: return 0b0000000000000000000000001000000001000000001000000001000000001000L;
				case 11: return 0b0000000000000000000000000000000010000000010000000010000000010000L;
				case 12: return 0b0000000000000000000000000000000000000000100000000100000000100000L;
				case 13: return 0b0000000000000000000000000000000000000000000000001000000001000000L;
				case 14: return 0b0000000000000000000000000000000000000000000000000000000010000000L;
				default: throw new IllegalArgumentException("Invalid anti-diagonal index.");
			}
		}
		/**Returns a the numeric representation of a diagonal of the chess board on which the input parameter square lies with only
		 * the relevant bits set.
		 * 
		 * @param sqr a Square enum*/
		public static long getBySquare(Square sqr) {
			int sqrInd = sqr.ordinal();
			return getByIndex((sqrInd & 7) + (7 - (sqrInd >>> 3)));
		}
		/**Returns a the numeric representation of a diagonal of the chess board on which the input parameter square lies with only
		 * the relevant bits set.
		 * 
		 * @param sqrInd the index of a square*/
		public static long getBySquareIndex(int sqrInd) {
			return getByIndex((sqrInd & 7) + (7 - (sqrInd >>> 3)));
		}
	}
	
}
