package engine;

/*A class to group together objects exclusive to the chess board itself such as the squares, files, and ranks.
 * 
 * @author Viktor
 *
 */
public class Board {
	
	/**An enum type for the 64 squares of the chess board. Each constant has a field that contains a long with only the bit on
	 * the respective square's index set.
	 * 
	 * @author Viktor
	 *
	 */
	public static enum Square {

		A1 (0b0000000000000000000000000000000000000000000000000000000000000001L),
		B1 (0b0000000000000000000000000000000000000000000000000000000000000010L),
		C1 (0b0000000000000000000000000000000000000000000000000000000000000100L),
		D1 (0b0000000000000000000000000000000000000000000000000000000000001000L),
		E1 (0b0000000000000000000000000000000000000000000000000000000000010000L),
		F1 (0b0000000000000000000000000000000000000000000000000000000000100000L),
		G1 (0b0000000000000000000000000000000000000000000000000000000001000000L),
		H1 (0b0000000000000000000000000000000000000000000000000000000010000000L),
		A2 (0b0000000000000000000000000000000000000000000000000000000100000000L),
		B2 (0b0000000000000000000000000000000000000000000000000000001000000000L),
		C2 (0b0000000000000000000000000000000000000000000000000000010000000000L),
		D2 (0b0000000000000000000000000000000000000000000000000000100000000000L),
		E2 (0b0000000000000000000000000000000000000000000000000001000000000000L),
		F2 (0b0000000000000000000000000000000000000000000000000010000000000000L),
		G2 (0b0000000000000000000000000000000000000000000000000100000000000000L),
		H2 (0b0000000000000000000000000000000000000000000000001000000000000000L),
		A3 (0b0000000000000000000000000000000000000000000000010000000000000000L),
		B3 (0b0000000000000000000000000000000000000000000000100000000000000000L),
		C3 (0b0000000000000000000000000000000000000000000001000000000000000000L),
		D3 (0b0000000000000000000000000000000000000000000010000000000000000000L),
		E3 (0b0000000000000000000000000000000000000000000100000000000000000000L),
		F3 (0b0000000000000000000000000000000000000000001000000000000000000000L),
		G3 (0b0000000000000000000000000000000000000000010000000000000000000000L),
		H3 (0b0000000000000000000000000000000000000000100000000000000000000000L),
		A4 (0b0000000000000000000000000000000000000001000000000000000000000000L),
		B4 (0b0000000000000000000000000000000000000010000000000000000000000000L),
		C4 (0b0000000000000000000000000000000000000100000000000000000000000000L),
		D4 (0b0000000000000000000000000000000000001000000000000000000000000000L),
		E4 (0b0000000000000000000000000000000000010000000000000000000000000000L),
		F4 (0b0000000000000000000000000000000000100000000000000000000000000000L),
		G4 (0b0000000000000000000000000000000001000000000000000000000000000000L),
		H4 (0b0000000000000000000000000000000010000000000000000000000000000000L),
		A5 (0b0000000000000000000000000000000100000000000000000000000000000000L),
		B5 (0b0000000000000000000000000000001000000000000000000000000000000000L),
		C5 (0b0000000000000000000000000000010000000000000000000000000000000000L),
		D5 (0b0000000000000000000000000000100000000000000000000000000000000000L),
		E5 (0b0000000000000000000000000001000000000000000000000000000000000000L),
		F5 (0b0000000000000000000000000010000000000000000000000000000000000000L),
		G5 (0b0000000000000000000000000100000000000000000000000000000000000000L),
		H5 (0b0000000000000000000000001000000000000000000000000000000000000000L),
		A6 (0b0000000000000000000000010000000000000000000000000000000000000000L),
		B6 (0b0000000000000000000000100000000000000000000000000000000000000000L),
		C6 (0b0000000000000000000001000000000000000000000000000000000000000000L),
		D6 (0b0000000000000000000010000000000000000000000000000000000000000000L),
		E6 (0b0000000000000000000100000000000000000000000000000000000000000000L),
		F6 (0b0000000000000000001000000000000000000000000000000000000000000000L),
		G6 (0b0000000000000000010000000000000000000000000000000000000000000000L),
		H6 (0b0000000000000000100000000000000000000000000000000000000000000000L),
		A7 (0b0000000000000001000000000000000000000000000000000000000000000000L),
		B7 (0b0000000000000010000000000000000000000000000000000000000000000000L),
		C7 (0b0000000000000100000000000000000000000000000000000000000000000000L),
		D7 (0b0000000000001000000000000000000000000000000000000000000000000000L),
		E7 (0b0000000000010000000000000000000000000000000000000000000000000000L),
		F7 (0b0000000000100000000000000000000000000000000000000000000000000000L),
		G7 (0b0000000001000000000000000000000000000000000000000000000000000000L),
		H7 (0b0000000010000000000000000000000000000000000000000000000000000000L),
		A8 (0b0000000100000000000000000000000000000000000000000000000000000000L),
		B8 (0b0000001000000000000000000000000000000000000000000000000000000000L),
		C8 (0b0000010000000000000000000000000000000000000000000000000000000000L),
		D8 (0b0000100000000000000000000000000000000000000000000000000000000000L),
		E8 (0b0001000000000000000000000000000000000000000000000000000000000000L),
		F8 (0b0010000000000000000000000000000000000000000000000000000000000000L),
		G8 (0b0100000000000000000000000000000000000000000000000000000000000000L),
		H8 (0b1000000000000000000000000000000000000000000000000000000000000000L);

		public final long bitmap;

		private Square(long bitmap) {
			this.bitmap = bitmap;
		}
		/**Returns a String representation of the square.*/
		public String toString() {
			return toString(this.ordinal());
		}
		/**Returns a String representation of the square that is easily readable for humans.
		 * 
		 * @param sqrInd
		 * @return
		 */
		public static String toString(int sqrInd) {
			return ("" + (char)('a' + sqrInd%8) + "" + (sqrInd/8 + 1)).toUpperCase();
		}
		/**Returns the index of a square specified by its file and rank.
		 * 
		 * @param square
		 * @return
		 */
		public static int toNumeric(String square) {
			if (square.length() == 2) {
				square = square.toLowerCase();
				int out = 8*(square.charAt(0) - 'a') + (square.charAt(1) - '1');
				if (out >= 0 && out < 64)
					return out;
			}
			throw new IllegalArgumentException();
		}
		/**@return a Square enum.*/
		public static Square getByIndex(int sqrInd) {
			switch(sqrInd) {
				case 0:  return A1; case 1:  return B1; case 2:  return C1; case 3:  return D1; case 4:  return E1; case 5:  return F1; case 6:  return G1; case 7:  return H1;
				case 8:  return A2; case 9:  return B2; case 10: return C2; case 11: return D2; case 12: return E2; case 13: return F2; case 14: return G2; case 15: return H2;
				case 16: return A3; case 17: return B3; case 18: return C3; case 19: return D3; case 20: return E3; case 21: return F3; case 22: return G3; case 23: return H3;
				case 24: return A4; case 25: return B4; case 26: return C4; case 27: return D4; case 28: return E4; case 29: return F4; case 30: return G4; case 31: return H4;
				case 32: return A5; case 33: return B5; case 34: return C5; case 35: return D5; case 36: return E5; case 37: return F5; case 38: return G5; case 39: return H5;
				case 40: return A6; case 41: return B6; case 42: return C6; case 43: return D6; case 44: return E6; case 45: return F6; case 46: return G6; case 47: return H6;
				case 48: return A7; case 49: return B7; case 50: return C7; case 51: return D7; case 52: return E7; case 53: return F7; case 54: return G7; case 55: return H7;
				case 56: return A8; case 57: return B8; case 58: return C8; case 59: return D8; case 60: return E8; case 61: return F8; case 62: return G8; case 63: return H8;
				default: throw new IllegalArgumentException("Invalid square index.");
			}
		}
		/**@return a long with only the selected square set.*/
		public static long getBitmapByIndex(int sqrInd) {
			switch(sqrInd) {
				case 0:  return 0b0000000000000000000000000000000000000000000000000000000000000001L;
				case 1:  return 0b0000000000000000000000000000000000000000000000000000000000000010L;
				case 2:  return 0b0000000000000000000000000000000000000000000000000000000000000100L;
				case 3:  return 0b0000000000000000000000000000000000000000000000000000000000001000L;
				case 4:  return 0b0000000000000000000000000000000000000000000000000000000000010000L;
				case 5:  return 0b0000000000000000000000000000000000000000000000000000000000100000L;
				case 6:  return 0b0000000000000000000000000000000000000000000000000000000001000000L;
				case 7:  return 0b0000000000000000000000000000000000000000000000000000000010000000L;
				case 8:  return 0b0000000000000000000000000000000000000000000000000000000100000000L;
				case 9:  return 0b0000000000000000000000000000000000000000000000000000001000000000L;
				case 10: return 0b0000000000000000000000000000000000000000000000000000010000000000L;
				case 11: return 0b0000000000000000000000000000000000000000000000000000100000000000L;
				case 12: return 0b0000000000000000000000000000000000000000000000000001000000000000L;
				case 13: return 0b0000000000000000000000000000000000000000000000000010000000000000L;
				case 14: return 0b0000000000000000000000000000000000000000000000000100000000000000L;
				case 15: return 0b0000000000000000000000000000000000000000000000001000000000000000L;
				case 16: return 0b0000000000000000000000000000000000000000000000010000000000000000L;
				case 17: return 0b0000000000000000000000000000000000000000000000100000000000000000L;
				case 18: return 0b0000000000000000000000000000000000000000000001000000000000000000L;
				case 19: return 0b0000000000000000000000000000000000000000000010000000000000000000L;
				case 20: return 0b0000000000000000000000000000000000000000000100000000000000000000L;
				case 21: return 0b0000000000000000000000000000000000000000001000000000000000000000L;
				case 22: return 0b0000000000000000000000000000000000000000010000000000000000000000L;
				case 23: return 0b0000000000000000000000000000000000000000100000000000000000000000L;
				case 24: return 0b0000000000000000000000000000000000000001000000000000000000000000L;
				case 25: return 0b0000000000000000000000000000000000000010000000000000000000000000L;
				case 26: return 0b0000000000000000000000000000000000000100000000000000000000000000L;
				case 27: return 0b0000000000000000000000000000000000001000000000000000000000000000L;
				case 28: return 0b0000000000000000000000000000000000010000000000000000000000000000L;
				case 29: return 0b0000000000000000000000000000000000100000000000000000000000000000L;
				case 30: return 0b0000000000000000000000000000000001000000000000000000000000000000L;
				case 31: return 0b0000000000000000000000000000000010000000000000000000000000000000L;
				case 32: return 0b0000000000000000000000000000000100000000000000000000000000000000L;
				case 33: return 0b0000000000000000000000000000001000000000000000000000000000000000L;
				case 34: return 0b0000000000000000000000000000010000000000000000000000000000000000L;
				case 35: return 0b0000000000000000000000000000100000000000000000000000000000000000L;
				case 36: return 0b0000000000000000000000000001000000000000000000000000000000000000L;
				case 37: return 0b0000000000000000000000000010000000000000000000000000000000000000L;
				case 38: return 0b0000000000000000000000000100000000000000000000000000000000000000L;
				case 39: return 0b0000000000000000000000001000000000000000000000000000000000000000L;
				case 40: return 0b0000000000000000000000010000000000000000000000000000000000000000L;
				case 41: return 0b0000000000000000000000100000000000000000000000000000000000000000L;
				case 42: return 0b0000000000000000000001000000000000000000000000000000000000000000L;
				case 43: return 0b0000000000000000000010000000000000000000000000000000000000000000L;
				case 44: return 0b0000000000000000000100000000000000000000000000000000000000000000L;
				case 45: return 0b0000000000000000001000000000000000000000000000000000000000000000L;
				case 46: return 0b0000000000000000010000000000000000000000000000000000000000000000L;
				case 47: return 0b0000000000000000100000000000000000000000000000000000000000000000L;
				case 48: return 0b0000000000000001000000000000000000000000000000000000000000000000L;
				case 49: return 0b0000000000000010000000000000000000000000000000000000000000000000L;
				case 50: return 0b0000000000000100000000000000000000000000000000000000000000000000L;
				case 51: return 0b0000000000001000000000000000000000000000000000000000000000000000L;
				case 52: return 0b0000000000010000000000000000000000000000000000000000000000000000L;
				case 53: return 0b0000000000100000000000000000000000000000000000000000000000000000L;
				case 54: return 0b0000000001000000000000000000000000000000000000000000000000000000L;
				case 55: return 0b0000000010000000000000000000000000000000000000000000000000000000L;
				case 56: return 0b0000000100000000000000000000000000000000000000000000000000000000L;
				case 57: return 0b0000001000000000000000000000000000000000000000000000000000000000L;
				case 58: return 0b0000010000000000000000000000000000000000000000000000000000000000L;
				case 59: return 0b0000100000000000000000000000000000000000000000000000000000000000L;
				case 60: return 0b0001000000000000000000000000000000000000000000000000000000000000L;
				case 61: return 0b0010000000000000000000000000000000000000000000000000000000000000L;
				case 62: return 0b0100000000000000000000000000000000000000000000000000000000000000L;
				case 63: return 0b1000000000000000000000000000000000000000000000000000000000000000L;
				default: throw new IllegalArgumentException("Invalid square index.");
			}
		}
	}

	/**An enum type for the 8 files/columns of a chess board. Each constant has a field that contains a long with only the bits falling on the
	 * file set.
	 * 
	 * @author Viktor
	 *
	 */
	public static enum File {
		
		A (0b0000000100000001000000010000000100000001000000010000000100000001L),
		B (0b0000001000000010000000100000001000000010000000100000001000000010L),
		C (0b0000010000000100000001000000010000000100000001000000010000000100L),
		D (0b0000100000001000000010000000100000001000000010000000100000001000L),
		E (0b0001000000010000000100000001000000010000000100000001000000010000L),
		F (0b0010000000100000001000000010000000100000001000000010000000100000L),
		G (0b0100000001000000010000000100000001000000010000000100000001000000L),
		H (0b1000000010000000100000001000000010000000100000001000000010000000L);
		
		public final long bitmap;
		
		private File(long bitmap) {
			this.bitmap = bitmap;
		}
		/**Returns a the numeric representation of a file of the chess board with only the bits falling on the specified file set.
		 * 
		 * @param fileInd the index of the file*/
		public static long getByIndex(int fileInd) {
			switch(fileInd) {
				case 0:  return 0b0000000100000001000000010000000100000001000000010000000100000001L;
				case 1:  return 0b0000001000000010000000100000001000000010000000100000001000000010L;
				case 2:  return 0b0000010000000100000001000000010000000100000001000000010000000100L;
				case 3:  return 0b0000100000001000000010000000100000001000000010000000100000001000L;
				case 4:  return 0b0001000000010000000100000001000000010000000100000001000000010000L;
				case 5:  return 0b0010000000100000001000000010000000100000001000000010000000100000L;
				case 6:  return 0b0100000001000000010000000100000001000000010000000100000001000000L;
				case 7:  return 0b1000000010000000100000001000000010000000100000001000000010000000L;
				default: throw new IllegalArgumentException("Invalid file index.");
			}
		}
		/**Returns a the numeric representation of the file of the chess board on which the input parameter square lies with only
		 * the relevant bits set.
		 * 
		 * @param sqr a Square enum*/
		public static long getBySquare(Square sqr) {
			return getByIndex(sqr.ordinal() & 7);
		}
		/**Returns a the numeric representation of the file of the chess board on which the input parameter square lies with only
		 * the relevant bits set.
		 * 
		 * @param sqrInd the index of the square*/
		public static long getBySquareIndex(int sqrInd) {
			return getByIndex(sqrInd & 7);
		}
	}
	
	/**An enum type for the 8 ranks/rows of a chess board. Each constant has a field that contains a long with only the byte on the rank's
	 * index set.
	 * 
	 * @author Viktor
	 *
	 */
	public static enum Rank {
		
		R1 (0b0000000000000000000000000000000000000000000000000000000011111111L),
		R2 (0b0000000000000000000000000000000000000000000000001111111100000000L),
		R3 (0b0000000000000000000000000000000000000000111111110000000000000000L),
		R4 (0b0000000000000000000000000000000011111111000000000000000000000000L),
		R5 (0b0000000000000000000000001111111100000000000000000000000000000000L),
		R6 (0b0000000000000000111111110000000000000000000000000000000000000000L),
		R7 (0b0000000011111111000000000000000000000000000000000000000000000000L),
		R8 (0b1111111100000000000000000000000000000000000000000000000000000000L);
		
		public final long bitmap;
		
		private Rank(long bitmap) {
			this.bitmap = bitmap;
		}
		/**Returns a the numeric representation of a rank of the chess board with only the byte on the rank's index set.
		 * 
		 * @param rnkInd the index of the rank*/
		public static long getByIndex(int rnkInd) {
			switch(rnkInd) {
				case 0:  return 0b0000000000000000000000000000000000000000000000000000000011111111L;
				case 1:  return 0b0000000000000000000000000000000000000000000000001111111100000000L;
				case 2:  return 0b0000000000000000000000000000000000000000111111110000000000000000L;
				case 3:  return 0b0000000000000000000000000000000011111111000000000000000000000000L;
				case 4:  return 0b0000000000000000000000001111111100000000000000000000000000000000L;
				case 5:  return 0b0000000000000000111111110000000000000000000000000000000000000000L;
				case 6:  return 0b0000000011111111000000000000000000000000000000000000000000000000L;
				case 7:  return 0b1111111100000000000000000000000000000000000000000000000000000000L;
				default: throw new IllegalArgumentException("Invalid rank index.");
			}
		}
		/**Returns a the numeric representation of the rank of the chess board on which the input parameter square lies with only
		 * the byte on the rank's index set.
		 * 
		 * @param sqr a Square enum*/
		public static long getBySquare(Square sqr) {
			return getByIndex(sqr.ordinal() >>> 3);
		}
		/**Returns a the numeric representation of the rank of the chess board on which the input parameter square lies with only
		 * the byte on the rank's index set.
		 * 
		 * @param sqrInd the index of the square*/
		public static long getBySquareIndex(int sqrInd) {
			return getByIndex(sqrInd >>> 3);
		}
	}
	
	/**An enum type for the 15 diagonals of a chess board. Each constant has a field that contains a long with only the bits on indexes
	 * of the squares falling on the diagonal set.
	 * 
	 * @author Viktor
	 *
	 */
	public static enum Diagonal {
		
		DG1  (0b0000000000000000000000000000000000000000000000000000000000000001L),
		DG2  (0b0000000000000000000000000000000000000000000000000000000100000010L),
		DG3  (0b0000000000000000000000000000000000000000000000010000001000000100L),
		DG4  (0b0000000000000000000000000000000000000001000000100000010000001000L),
		DG5  (0b0000000000000000000000000000000100000010000001000000100000010000L),
		DG6  (0b0000000000000000000000010000001000000100000010000001000000100000L),
		DG7  (0b0000000000000001000000100000010000001000000100000010000001000000L),
		DG8  (0b0000000100000010000001000000100000010000001000000100000010000000L),
		DG9  (0b0000001000000100000010000001000000100000010000001000000000000000L),
		DG10 (0b0000010000001000000100000010000001000000100000000000000000000000L),
		DG11 (0b0000100000010000001000000100000010000000000000000000000000000000L),
		DG12 (0b0001000000100000010000001000000000000000000000000000000000000000L),
		DG13 (0b0010000001000000100000000000000000000000000000000000000000000000L),
		DG14 (0b0100000010000000000000000000000000000000000000000000000000000000L),
		DG15 (0b1000000000000000000000000000000000000000000000000000000000000000L);
		
		public final long bitmap;
		
		private Diagonal(long bitmap) {
			this.bitmap = bitmap;
		}
		/**Returns a the numeric representation of a diagonal of the chess board with only the bits falling on the specified diagonal set.
		 * 
		 * @param dgnInd the index of the diagonal*/
		public static long getByIndex(int dgnInd) {
			switch(dgnInd) {
				case 0:  return 0b0000000000000000000000000000000000000000000000000000000000000001L;
				case 1:  return 0b0000000000000000000000000000000000000000000000000000000100000010L;
				case 2:  return 0b0000000000000000000000000000000000000000000000010000001000000100L;
				case 3:  return 0b0000000000000000000000000000000000000001000000100000010000001000L;
				case 4:  return 0b0000000000000000000000000000000100000010000001000000100000010000L;
				case 5:  return 0b0000000000000000000000010000001000000100000010000001000000100000L;
				case 6:  return 0b0000000000000001000000100000010000001000000100000010000001000000L;
				case 7:  return 0b0000000100000010000001000000100000010000001000000100000010000000L;
				case 8:  return 0b0000001000000100000010000001000000100000010000001000000000000000L;
				case 9:  return 0b0000010000001000000100000010000001000000100000000000000000000000L;
				case 10: return 0b0000100000010000001000000100000010000000000000000000000000000000L;
				case 11: return 0b0001000000100000010000001000000000000000000000000000000000000000L;
				case 12: return 0b0010000001000000100000000000000000000000000000000000000000000000L;
				case 13: return 0b0100000010000000000000000000000000000000000000000000000000000000L;
				case 14: return 0b1000000000000000000000000000000000000000000000000000000000000000L;
				default: throw new IllegalArgumentException("Invalid diagonal index.");
			}
		}
		/**Returns a the numeric representation of a diagonal of the chess board on which the input parameter square lies with only
		 * the relevant bits set.
		 * 
		 * @param sqr a Square enum*/
		public static long getBySquare(Square sqr) {
			int sqrInd = sqr.ordinal();
			return getByIndex((sqrInd & 7) + (sqrInd >>> 3));
		}
		/**Returns a the numeric representation of a diagonal of the chess board on which the input parameter square lies with only
		 * the relevant bits set.
		 * 
		 * @param sqrInd the index of a square*/
		public static long getBySquareIndex(int sqrInd) {
			return getByIndex((sqrInd & 7) + (sqrInd >>> 3));
		}
	}
	
	/**An enum type for the 15 anti-diagonals of a chess board. Each constant has a field that contains a long with only the bits on indexes
	 * of the squares falling on the diagonal set.
	 * 
	 * @author Viktor
	 *
	 */
	public static enum AntiDiagonal {
		
		ADG1  (0b0000000100000000000000000000000000000000000000000000000000000000L),
		ADG2  (0b0000001000000001000000000000000000000000000000000000000000000000L),
		ADG3  (0b0000010000000010000000010000000000000000000000000000000000000000L),
		ADG4  (0b0000100000000100000000100000000100000000000000000000000000000000L),
		ADG5  (0b0001000000001000000001000000001000000001000000000000000000000000L),
		ADG6  (0b0010000000010000000010000000010000000010000000010000000000000000L),
		ADG7  (0b0100000000100000000100000000100000000100000000100000000100000000L),
		ADG8  (0b1000000001000000001000000001000000001000000001000000001000000001L),
		ADG9  (0b0000000010000000010000000010000000010000000010000000010000000010L),
		ADG10 (0b0000000000000000100000000100000000100000000100000000100000000100L),
		ADG11 (0b0000000000000000000000001000000001000000001000000001000000001000L),
		ADG12 (0b0000000000000000000000000000000010000000010000000010000000010000L),
		ADG13 (0b0000000000000000000000000000000000000000100000000100000000100000L),
		ADG14 (0b0000000000000000000000000000000000000000000000001000000001000000L),
		ADG15 (0b0000000000000000000000000000000000000000000000000000000010000000L);
		
		final long bitmap;
		
		private AntiDiagonal(long bitmap) {
			this.bitmap = bitmap;
		}
		/**Returns a the numeric representation of an anti-diagonal of the chess board with only the bits falling on the specified diagonal set.
		 * 
		 * @param adgnInd the index of the anti-diagonal*/
		public static long getByIndex(int adgnInd) {
			switch(adgnInd) {
				case 0:  return 0b0000000100000000000000000000000000000000000000000000000000000000L;
				case 1:  return 0b0000001000000001000000000000000000000000000000000000000000000000L;
				case 2:  return 0b0000010000000010000000010000000000000000000000000000000000000000L;
				case 3:  return 0b0000100000000100000000100000000100000000000000000000000000000000L;
				case 4:  return 0b0001000000001000000001000000001000000001000000000000000000000000L;
				case 5:  return 0b0010000000010000000010000000010000000010000000010000000000000000L;
				case 6:  return 0b0100000000100000000100000000100000000100000000100000000100000000L;
				case 7:  return 0b1000000001000000001000000001000000001000000001000000001000000001L;
				case 8:  return 0b0000000010000000010000000010000000010000000010000000010000000010L;
				case 9:  return 0b0000000000000000100000000100000000100000000100000000100000000100L;
				case 10: return 0b0000000000000000000000001000000001000000001000000001000000001000L;
				case 11: return 0b0000000000000000000000000000000010000000010000000010000000010000L;
				case 12: return 0b0000000000000000000000000000000000000000100000000100000000100000L;
				case 13: return 0b0000000000000000000000000000000000000000000000001000000001000000L;
				case 14: return 0b0000000000000000000000000000000000000000000000000000000010000000L;
				default: throw new IllegalArgumentException("Invalid anti-diagonal index.");
			}
		}
		/**Returns a the numeric representation of a diagonal of the chess board on which the input parameter square lies with only
		 * the relevant bits set.
		 * 
		 * @param sqr a Square enum*/
		public static long getBySquare(Square sqr) {
			int sqrInd = sqr.ordinal();
			return getByIndex((sqrInd & 7) + (7 - (sqrInd >>> 3)));
		}
		/**Returns a the numeric representation of a diagonal of the chess board on which the input parameter square lies with only
		 * the relevant bits set.
		 * 
		 * @param sqrInd the index of a square*/
		public static long getBySquareIndex(int sqrInd) {
			return getByIndex((sqrInd & 7) + (7 - (sqrInd >>> 3)));
		}
	}
}
