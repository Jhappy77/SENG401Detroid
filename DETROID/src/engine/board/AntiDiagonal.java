package engine.board;


/**An enum type for the 15 anti-diagonals of a chess board. Each constant has a field that contains a long with only the bits on indexes
 * of the squares falling on the diagonal set.
 * 
 * @author Viktor
 *
 */
public enum AntiDiagonal {
	
	ADG1  (0b0000000100000000000000000000000000000000000000000000000000000000L),
	ADG2  (0b0000001000000001000000000000000000000000000000000000000000000000L),
	ADG3  (0b0000010000000010000000010000000000000000000000000000000000000000L),
	ADG4  (0b0000100000000100000000100000000100000000000000000000000000000000L),
	ADG5  (0b0001000000001000000001000000001000000001000000000000000000000000L),
	ADG6  (0b0010000000010000000010000000010000000010000000010000000000000000L),
	ADG7  (0b0100000000100000000100000000100000000100000000100000000100000000L),
	ADG8  (0b1000000001000000001000000001000000001000000001000000001000000001L),
	ADG9  (0b0000000010000000010000000010000000010000000010000000010000000010L),
	ADG10 (0b0000000000000000100000000100000000100000000100000000100000000100L),
	ADG11 (0b0000000000000000000000001000000001000000001000000001000000001000L),
	ADG12 (0b0000000000000000000000000000000010000000010000000010000000010000L),
	ADG13 (0b0000000000000000000000000000000000000000100000000100000000100000L),
	ADG14 (0b0000000000000000000000000000000000000000000000001000000001000000L),
	ADG15 (0b0000000000000000000000000000000000000000000000000000000010000000L);
	
	final long bitmap;
	
	private AntiDiagonal(long bitmap) {
		this.bitmap = bitmap;
	}
	/**Returns a the numeric representation of an anti-diagonal of the chess board with only the bits falling on the specified diagonal set.
	 * 
	 * @param adgnInd the index of the anti-diagonal*/
	public static long getByIndex(int adgnInd) {
		switch(adgnInd) {
			case 0:  return 0b0000000100000000000000000000000000000000000000000000000000000000L;
			case 1:  return 0b0000001000000001000000000000000000000000000000000000000000000000L;
			case 2:  return 0b0000010000000010000000010000000000000000000000000000000000000000L;
			case 3:  return 0b0000100000000100000000100000000100000000000000000000000000000000L;
			case 4:  return 0b0001000000001000000001000000001000000001000000000000000000000000L;
			case 5:  return 0b0010000000010000000010000000010000000010000000010000000000000000L;
			case 6:  return 0b0100000000100000000100000000100000000100000000100000000100000000L;
			case 7:  return 0b1000000001000000001000000001000000001000000001000000001000000001L;
			case 8:  return 0b0000000010000000010000000010000000010000000010000000010000000010L;
			case 9:  return 0b0000000000000000100000000100000000100000000100000000100000000100L;
			case 10: return 0b0000000000000000000000001000000001000000001000000001000000001000L;
			case 11: return 0b0000000000000000000000000000000010000000010000000010000000010000L;
			case 12: return 0b0000000000000000000000000000000000000000100000000100000000100000L;
			case 13: return 0b0000000000000000000000000000000000000000000000001000000001000000L;
			case 14: return 0b0000000000000000000000000000000000000000000000000000000010000000L;
			default: throw new IllegalArgumentException("Invalid anti-diagonal index.");
		}
	}
	/**Returns a the numeric representation of a diagonal of the chess board on which the input parameter square lies with only
	 * the relevant bits set.
	 * 
	 * @param sqr a Square enum*/
	public static long getBySquare(Square sqr) {
		int sqrInd = sqr.ordinal();
		return getByIndex((sqrInd & 7) + (7 - (sqrInd >>> 3)));
	}
	/**Returns a the numeric representation of a diagonal of the chess board on which the input parameter square lies with only
	 * the relevant bits set.
	 * 
	 * @param sqrInd the index of a square*/
	public static long getBySquareIndex(int sqrInd) {
		return getByIndex((sqrInd & 7) + (7 - (sqrInd >>> 3)));
	}
}